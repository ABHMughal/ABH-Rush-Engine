<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
mask = 16

character = "Sonic"
if variable_global_exists("curr_character")
    character = global.curr_character
super = false

instance_create(0,0,obj_titlecard_new) //title card animation 

//creation position
if instance_exists(obj_checkpoint_controller) &amp;&amp; variable_instance_exists(obj_checkpoint_controller, "checkpoint")
{
    if obj_checkpoint_controller.checkpoint
    {
        x = obj_checkpoint_controller.x_checkpoint_pos
        y = obj_checkpoint_controller.y_checkpoint_pos
    }
}
//essential objects

//instance_create(0,0,obj_HUD_ingame)
instance_create(x,y,obj_player_camera)
instance_create(x,y,obj_stagetime)
if !instance_exists(obj_stagestat_controller)
    instance_create(x,y,obj_stagestat_controller)

//local variables
hsp = 0;//horizonal speed
vsp = 0;//vertical speed

hspl = 15;//horizontal speed limit
hspm = 12;//horizontal speed normal
highhsp = 0;

vspl = 16;//vertical speed limit


jmp = -6.5;//jumping speed
sjmp = -4;//lowest jump
djmp = false; //variable for homing attack enabler
djmp2 = false; //variable for air dash 

acc = 0.125;//acceleration
dcc = 0.5;//deceleration

frc = 0.046875;//friction

grv = 0.21875;//gravity

ground = false;//checking if the character is on ground or not

acos = 1;//cosine angle
asin = 0;//sine angle

angle = 0;//angle of character
i_angle = 0; //image angle
action = 0;//checks what type of action is going on



//boost related variables
boostamount = 100;
boosting = false;
canBoost = true;


adrag = 0.96875; //air drag but not used
bfr = 0.023475; //ball friction
bdcc = 0.1484375;   //ball deceleration
sp = 0; //spindash
spot = 0;   //peelout (not used)

step = 0 //trail step

xdir = 1; //draw horizontal direction
xlayer = 0; //which layer to be collided

canMove = true
if instance_exists(obj_titlecard_new)
    canMove = false; //making Sonic able to move, used in title card animation for making Sonic still

canHit = true;  //making Sonic able to take damage from enemies
hitInvincible = 0 //a timer variable for post damage invincibility


canWallJump = true; //used for making able to wall jump
canFloat = false;   //used for making sonic able to run on water surface
canGrind = true;    //variable for making Sonic grind on rail
dead = false;

rings = 0;

//qte related varibles
qte_amount = 1;  
jumppanel = 1

//some other variables
footstep = false
underwater = false
zipline_speed = 0

snd_footstep1 = 0
snd_footstep2 = 0

ring_step = 60

stageClear = false

//sprite default variables

image_alpha = 1;
image_index = 0;
sprite_index = 0;
image_speed = 0;

draw_yPos = 0;

last_action = 0;
sprp = spr_Sonic_stand
frame = 0;
image_i = 0;

//custom alarm variables, I used them instead of actual alarms

alarm0 = 0
alarm1 = 0
alarm2 = 0
alarm3 = 0
alarm4 = 0

//input mode 
input_mode = 0  //0 means keyboard and 1 mean xbox controller
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action = 0
x = x - xdir*6
canWallJump = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grv = 0.21875
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self()
if super == false
{
    if character == "Sonic"
        draw_Sonic()
    else if character == "Shadow"
        draw_Shadow()
}
else
{
    if character == "Sonic"
        draw_SuperSonic()
    else if character == "Shadow"
        draw_SuperShadow()
}

boost_direction = point_direction(x_begin,y_begin,x,y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//assigning input buttons
key_d = keyboard_check(vk_down) || gamepad_button_check(0,gp_padd);
key_u = keyboard_check(vk_up) || gamepad_button_check(0,gp_padu);
key_r = keyboard_check(vk_right) || gamepad_button_check(0,gp_padr);
key_l = keyboard_check(vk_left)  || gamepad_button_check(0,gp_padl);
key_jump = keyboard_check_pressed(ord('S'))  || gamepad_button_check_pressed(0,gp_face1);
key_jumpr = keyboard_check_released(ord('S')) || gamepad_button_check_released(0,gp_face1);
key_attack = keyboard_check(ord('D')) || gamepad_button_check(0,gp_face2);
key_attack_p = keyboard_check_pressed(ord('D')) || gamepad_button_check_pressed(0,gp_face2);
key_boost = keyboard_check_pressed(ord('A')) || gamepad_button_check_pressed(0,gp_face3);
key_boostr = keyboard_check_released(ord('A')) || gamepad_button_check_released(0,gp_face3);
key_stomp = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(0,gp_padd)
key_special = keyboard_check_pressed(ord('W')) || gamepad_button_check_pressed(0,gp_face4)

//begin position values for boost sprite direction
x_begin = x
y_begin = y


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if keyboard_check_pressed(ord('Y'))
{
    if character == "Sonic"
        character = "Shadow"
    else 
        character = "Sonic"
}
if keyboard_check_pressed(ord('U'))
{
    super = !super;
}
*/
if keyboard_check_pressed(ord('R'))
{
    room_restart()
}



if !canMove
{
    if character == "Sonic"
        sprp = spr_Sonic_stand
    else if character == "Shadow"
        sprp = spr_Shadow_stand
    exit
}
//check input
if keyboard_check(vk_anykey)
    input_mode = 0
if check_xbox_controller()
    input_mode = 1
//custom alarms

if alarm0 &gt; 0
{
    alarm0 -= 1
    if alarm0 == 1
        grv = 0.21875
}

if alarm1 &gt; 0
{
    alarm1 -= 1
    if alarm1 == 1 &amp;&amp; action = 8
        action = 0
}

if alarm2 &gt; 0
{
    alarm2 -= 1
    if alarm2 == 1 &amp;&amp; action == 4.5
    {
        action = 0
        if character == "Sonic"
            hsp = 0
        vsp = 0
        grv = 0.21875;
    }
}

if alarm3 &gt; 0
{
    alarm3 -= 1
    if alarm3 == 1
    {
        var blankscreen = instance_create(x,y,obj_blackblank_fadein);
        blankscreen.fadein = true
    }
}

if alarm4 &gt; 0
{
    if !instance_exists(obj_InverseColour)
        instance_create(0,0,obj_InverseColour)
    alarm4 -= 1
    if alarm4 == 1
    {
        with(obj_InverseColour)
        {
            instance_destroy()
        }
        room_speed = 60
        alarm4 -= 1
    }
}

//boost amount control

if super
{
    boostamount = 100
    ring_step -= 1
    if ring_step &lt;= 0
    {
        rings -= 1
        ring_step = 60
    }
}
else
{
    if boostamount &gt; 100
        boostamount = 100
    if boostamount &lt; 0
        boostamount = 0
}

    
//making trail
if instance_exists(obj_boostfx) || (character == "Shadow" &amp;&amp; (action == 4.5)) || super
{
    step += 1
    if step &gt;= 7
    {
        instance_create(x,y-1,obj_trail)
        step = 0
    }
    
    if ground &amp;&amp; step == 6 &amp;&amp; hsp != 0
    {
        var fx = instance_create(x,y,obj_boostspeed_fx);
        fx.image_xscale = xdir;
        fx.image_angle = angle;   
    }
}


if action == 15
{
    step += 1
    if step &gt;= 5
    {
        instance_create(x,y,obj_sparkle_trail)
        step = 0
    }
}

if !underwater &amp;&amp; abs(hsp) &gt;= 6 &amp;&amp; ground &amp;&amp; (action == 0 || action == 1 || action == 2)
    canFloat = true
else
    canFloat = false

if collision_line(x,y,x,y+20,obj_water_surface,true,true)
    angle = 0
if collision_point(x,y,obj_water,true,true)
{
    if !underwater
    {
        vsp = vsp*0.25
        hsp = hsp*0.5
        audio_play_sound(snd_watersplash,1,false)
        acc = 0.0234375;//acceleration
        dcc = 0.25;//deceleration
        frc = 0.0234375;//friction
        grv = 0.0625;//gravity
        jmp = -3.5;//jumping speed
        sjmp = -2;//lowest jump
    }
    underwater = true
}
else 
{
    if underwater
    {
        audio_play_sound(snd_watersplashout,1,false)
        if grv = 0.21875
            vsp = vsp*2
        acc = 0.25;//acceleration
        dcc = 0.5;//deceleration
        frc = 0.046875;//friction
        grv = 0.21875;//gravity
        jmp = -6.5;//jumping speed
        sjmp = -4;//lowest jump
    }
    underwater = false
}

  
//underwater bubble
if underwater &amp;&amp; choose(1,1,1,1,1,1,1,1,1,1,1,1,3)%3 == 0
    instance_create(x+choose(5,7,9)*xdir,y-5,obj_bubble)

//calling scripts
p_physics()

if !stageClear
{
    if character != "Tails"
        p_move_Sonic()
    else
        p_move_Tails()
}
else
{
    action = 0
    xdir = 1
    if abs(hsp) &lt; 9
    hsp += acc
}
//layer switching
if collision_circle(x,y,17,obj_t_background,true,false)
{
    xlayer = 0;
}

if collision_circle(x,y,17,obj_t_foreground,true,false)
{
    xlayer = 1;
}

if collision_circle(x,y,17,obj_t_switch,true,false)
{
    if hsp &gt; 0 &amp;&amp; ground 
        xlayer = 0;
    if hsp &lt; 0 &amp;&amp; ground
        xlayer = 1;
}

if collision_circle(x,y,17,obj_t_switch2,true,false)
{
    if hsp &gt; 0 &amp;&amp; ground 
        xlayer = 1;
    if hsp &lt; 0 &amp;&amp; ground
        xlayer = 0;
}


//footstep sounds
scr_footsteps()

/*
if ground
{
    if collision_line(x,y,x+20*asin,y+20*acos,obj_water_surface,true,true)
    {
        snd_footstep1 = snd_footstep_water1
        snd_footstep2 = snd_footstep_water2
    }
    else if collision_line(x,y,x+20*asin,y+20*acos,obj_glass_wall,true,true) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_bwalls_glass,true,true) &amp;&amp; xlayer == 0) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_fwalls_glass,true,true) &amp;&amp; xlayer == 1)
    {
        snd_footstep1 = snd_footstep_glass1
        snd_footstep2 = snd_footstep_glass2
    }
    else if collision_line(x,y,x+20*asin,y+20*acos,obj_grass_wall,true,true) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_bwalls_grass,true,true) &amp;&amp; xlayer == 0) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_fwalls_grass,true,true) &amp;&amp; xlayer == 1)
    {
        snd_footstep1 = snd_footstep_grass1
        snd_footstep2 = snd_footstep_grass2
    }
    else if collision_line(x,y,x+20*asin,y+20*acos,obj_stone_wall,true,true) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_bwalls_stone,true,true) &amp;&amp; xlayer == 0) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_fwalls_stone,true,true) &amp;&amp; xlayer == 1)
    {
        snd_footstep1 = snd_footstep_1
        snd_footstep2 = snd_footstep_2
    }
    else if collision_line(x,y,x+20*asin,y+20*acos,obj_metal_wall,true,true) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_bwalls_metal,true,true) &amp;&amp; xlayer == 0) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_fwalls_metal,true,true) &amp;&amp; xlayer == 1)
    {
        snd_footstep1 = snd_footstep_metal1
        snd_footstep2 = snd_footstep_metal2
    }
    else if collision_line(x,y,x+20*asin,y+20*acos,obj_wood_wall,true,true) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_bwalls_wood,true,true) &amp;&amp; xlayer == 0) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_fwalls_wood,true,true) &amp;&amp; xlayer == 1)
    {
        snd_footstep1 = snd_footstep_wood1
        snd_footstep2 = snd_footstep_wood2
    }
    else if collision_line(x,y,x+20*asin,y+20*acos,obj_dirt_wall,true,true) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_bwalls_dirt,true,true) &amp;&amp; xlayer == 0) 
    || (collision_line(x,y,x+20*asin,y+20*acos,obj_fwalls_dirt,true,true) &amp;&amp; xlayer == 1)
    {
        snd_footstep1 = snd_footstep_dirt1
        snd_footstep2 = snd_footstep_dirt2
    }
    else
    {
        snd_footstep1 = snd_footstep_1
        snd_footstep2 = snd_footstep_2
    }
}

if character == "Shadow" &amp;&amp; (sprp == spr_Shadow_skate || sprp == spr_SuperShadow_skate || sprp == spr_Shadow_skate_fast) 
{
    snd_footstep1 = snd_jetboots_R
    snd_footstep2 = snd_jetboots_L
}


if action == 0 &amp;&amp; sprp != spr_Sonic_stand &amp;&amp; sprp != spr_Shadow_stand &amp;&amp; sprp != spr_SuperSonic_stand &amp;&amp; sprp != spr_SuperSonic_fly &amp;&amp; sprp != spr_SuperShadow_stand &amp;&amp; sprp != spr_SuperShadow_fly &amp;&amp; ground &amp;&amp; !stageClear &amp;&amp; sprp != spr_Tails_sprint &amp;&amp; !(character == "Shadow" &amp;&amp; (sprp == spr_Shadow_skate_fast || sprp == spr_Shadow_skate || sprp == spr_Shadow_fly))
{
    if (image_i == 3 || image_i == 7 ) &amp;&amp; !footstep
    {
        footstep = true 
        audio_play_sound(choose(snd_footstep1,snd_footstep2),1,false)
    }
    else if image_i != 3 &amp;&amp; image_i != 7
        footstep = false
}
else if (character == "Shadow" &amp;&amp; (sprp == spr_Shadow_skate)) 
{
    if (image_i == 0 || image_i == 14) &amp;&amp; !footstep
    {
        footstep = true
        audio_play_sound(choose(snd_footstep1,snd_footstep2),1,false)
    }
    else if image_i != 7 &amp;&amp; image_i != 21
        footstep = false
}
else if (character == "Shadow" &amp;&amp; sprp == spr_Shadow_skate_fast)
{
    if (image_i == 4 || image_i == 21) &amp;&amp; !footstep
    {
        footstep = true
        audio_play_sound(choose(snd_footstep1,snd_footstep2),1,false)
    }
    else if image_i != 0 &amp;&amp; image_i != 17
        footstep = false
}
*/

//post-damage invincibility 
if hitInvincible &gt; 0 
{
    hitInvincible -= 1
    if hitInvincible == 1
        canHit = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self()
/*
if super == false
{
    if character == "Sonic"
        draw_Sonic()
    else if character == "Shadow"
        draw_Shadow()
}
else
{
    if character == "Sonic"
        draw_SuperSonic()
    else if character == "Shadow"
        draw_SuperShadow()
}
*/

//this section fixes Sonic being colliding a little inside of the wall surface, while drawing the sprites
var _wall = 0 
var _bbox_top = 0
if place_meeting(x,y,obj_walls)
{
    _wall = instance_place(x+asin*mask,y+acos*mask,obj_walls)
    _bbox_top = sprite_get_bbox_top(_wall) - sprite_get_yoffset(_wall)
}
else if place_meeting(x,y,obj_bwalls) || xlayer == 0
{
    _wall = instance_place(x+asin*mask,y+acos*mask,obj_bwalls)
    _bbox_top = sprite_get_bbox_top(_wall) - sprite_get_yoffset(_wall)
}
else if place_meeting(x,y,obj_fwalls) || xlayer == 1
{
    _wall = instance_place(x+asin*mask,y+acos*mask,obj_fwalls)
    _bbox_top = sprite_get_bbox_top(_wall) - sprite_get_yoffset(_wall)
}


if collision_point(x+(mask - 1.5)*asin,y+(mask - 1.5)*acos,obj_walls,true,true)
    _bbox_top += 1

draw_yPos = _bbox_top

// drawing sprite    
if acos == 1 &amp;&amp; ground
{
    draw_sprite_ext(sprp,image_i,x,y - _bbox_top,xdir,1,i_angle,c_white,image_alpha);
}
else if acos == -1 &amp;&amp; ground
    draw_sprite_ext(sprp,image_i,x,y+2,xdir,1,i_angle,c_white,image_alpha);
else
    draw_sprite_ext(sprp,image_i,x,y,xdir,1,i_angle,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
